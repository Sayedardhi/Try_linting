{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,11 @@\n+\"\"\"\n+Main function.\n+\n+The main function is the entry point for the program.\n+\"\"\"\n+\n+def main():\n+    # ...\n+\n+if __name__ == \"__main__\":\n     main()",
        "start_line": 115,
        "end_line": null
    },
    "C0103 - Module name \"E0701-bad_except_clauses_order\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,51 +1,31 @@\n-#!/usr/bin/env python3\n-\n \"\"\"\n Stanford Bluescreen Example\n Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n \"\"\"\n \n import sys\n-from PIL import Image\n \n-class SimpleImage:\n+def simple_image(filename):\n     \"\"\"\n     A wrapper class for PIL Image to facilitate pixel manipulation.\n     \"\"\"\n-    def __init__(self, filename):\n+    image = Image.open(filename)\n+    pixels = image.load()\n+    width, height = image.size\n+    return SimpleImage(image, pixels, width, height)\n+\n+class SimpleImage:\n+    def __init__(self, image, pixels, width, height):\n         \"\"\"\n         Initialize the SimpleImage with a given filename.\n         Load the image and get its size.\n         \"\"\"\n-        self.image = Image.open(filename)\n-        self.pixels = self.image.load()\n-        self.width, self.height = self.image.size\n+        self.image = image\n+        self.pixels = pixels\n+        self.width = width\n+        self.height = height\n \n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n-\n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n-\n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n-\n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n+    # ... (remaining code remains the same)\n \n def do_front(front_filename, back_filename):\n     \"\"\"\n@@ -55,8 +35,8 @@\n     Return changed front image.\n     \"\"\"\n     try:\n-        image = SimpleImage(front_filename)\n-        back = SimpleImage(back_filename)\n+        image = simple_image(front_filename)\n+        back = simple_image(back_filename)\n         for y in range(image.height):\n             for x in range(image.width):\n                 pixel = image.get_pixel(x, y)\n@@ -66,50 +46,5 @@\n         return image\n     except Exception as e:\n         print(f\"An error occurred: {e}\")\n-    except ValueError:  # Bad except clauses order (E0701)\n-        print(\"ValueError should be caught before Exception\")\n \n-def do_back(front_filename, shift_x, shift_y, back_filename):\n-    \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-if __name__ == '__main__':\n-    main()\n+# ... (remaining code remains the same)",
        "start_line": 1,
        "end_line": null
    },
    "W0718 - Catching too general exception Exception": {
        "diff": "--- \n+++ \n@@ -1 +1,9 @@\n-    except Exception as e:\n+\"\"\"\n+Module docstring\n+\"\"\"\n+\n+try:\n+    # ...\n+except Exception as e:\n+    # Handle specific exceptions appropriately\n+    raise ValueError(\"Encountered an unexpected error.\") from e",
        "start_line": 67,
        "end_line": 67
    },
    "E0701 - Bad except clauses order (Exception is an ancestor class of ValueError)": {
        "diff": "--- \n+++ \n@@ -1 +1,8 @@\n-    except ValueError:  # Bad except clauses order (E0701)\n+\"\"\"\n+Module docstring\n+\"\"\"\n+\n+try:\n+    # ...\n+except ValueError as e:\n+    # Handle ValueError appropriately",
        "start_line": 69,
        "end_line": 69
    },
    "R1710 - Either all return statements in a function should return an expression, or none of them should.": {
        "diff": "--- \n+++ \n@@ -1 +1,23 @@\n+\"\"\"\n+Do some front-end processing.\n+\n+\"\"\"\n def do_front(front_filename, back_filename):\n+    \"\"\"\n+    Processes the front file and writes to the back file.\n+\n+    Args:\n+        front_filename: Path to the front file.\n+        back_filename: Path to the back file.\n+\n+    \"\"\"\n+    # Read the front file.\n+    with open(front_filename, \"r\") as f:\n+        front_data = f.read()\n+\n+    # Process the front data.\n+    # ...\n+\n+    # Write the processed data to the back file.\n+    with open(back_filename, \"w\") as f:\n+        f.write(processed_data)",
        "start_line": 50,
        "end_line": 50
    }
}