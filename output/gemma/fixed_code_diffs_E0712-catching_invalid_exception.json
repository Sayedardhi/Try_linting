{
    "C0301 - Line too long (107/100)": {
        "diff": "--- \n+++ \n@@ -1,16 +1,15 @@\n-    except InvalidException as e:  # Catching an exception which doesn\u2019t inherit from BaseException (E0712)\n-        print(f\"Caught an invalid exception: {e}\")\n+\"\"\"\n+Back strategy: loop over image,\n+detect *non-blue* pixels.\n+Copy those pixels to back, shifted by shift_x, shift_y.\n+Pixels which fall outside of the background are ignored.\n+Return changed back image.\n+\"\"\"\n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n-    \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n     image = SimpleImage(front_filename)\n     back = SimpleImage(back_filename)\n+\n     for y in range(image.height):\n         for x in range(image.width):\n             pixel = image.get_pixel(x, y)\n@@ -19,12 +18,16 @@\n                 dest_y = y + shift_y\n                 if back.in_bounds(dest_x, dest_y):\n                     back.set_pixel(dest_x, dest_y, pixel)\n+\n     return back\n+\n \n def main():\n     \"\"\"\n     Main function to handle argument parsing and strategy execution.\n     \"\"\"\n+    import sys\n+\n     args = sys.argv[1:]\n \n     if len(args) != 2 and len(args) != 4:",
        "start_line": 72,
        "end_line": null
    },
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,13 @@\n+```python\n+\"\"\"\n+main.py\n+\"\"\"\n+\n+def main():\n+    \"\"\"\n+    This is the main function of the program.\n+    \"\"\"\n+    # ... Your code goes here ...\n+\n+if __name__ == \"__main__\":\n     main()",
        "start_line": 118,
        "end_line": null
    },
    "C0103 - Module name \"E0712-catching_invalid_exception\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,5 +1,3 @@\n-#!/usr/bin/env python3\n-\n \"\"\"\n Stanford Bluescreen Example\n Shows front and back strategies.\n@@ -10,10 +8,12 @@\n import sys\n from PIL import Image\n \n+\n class SimpleImage:\n     \"\"\"\n     A wrapper class for PIL Image to facilitate pixel manipulation.\n     \"\"\"\n+\n     def __init__(self, filename):\n         \"\"\"\n         Initialize the SimpleImage with a given filename.\n@@ -23,11 +23,13 @@\n         self.pixels = self.image.load()\n         self.width, self.height = self.image.size\n \n+\n     def get_pixel(self, x, y):\n         \"\"\"\n         Get the pixel value at the given (x, y) coordinates.\n         \"\"\"\n         return self.pixels[x, y]\n+\n \n     def set_pixel(self, x, y, color):\n         \"\"\"\n@@ -35,11 +37,13 @@\n         \"\"\"\n         self.pixels[x, y] = color\n \n+\n     def in_bounds(self, x, y):\n         \"\"\"\n         Check if the given (x, y) coordinates are within the image bounds.\n         \"\"\"\n         return 0 <= x < self.width and 0 <= y < self.height\n+\n \n     def show(self):\n         \"\"\"\n@@ -47,10 +51,12 @@\n         \"\"\"\n         self.image.show()\n \n-class InvalidException:\n+\n+class InvalidException(Exception):\n     \"\"\"\n-    Custom exception class that doesn't inherit from BaseException.\n+    Custom exception class that inherits from BaseException.\n     \"\"\"\n+\n \n def do_front(front_filename, back_filename):\n     \"\"\"\n@@ -69,50 +75,11 @@\n                     back_pixel = back.get_pixel(x, y)\n                     image.set_pixel(x, y, back_pixel)\n         return image\n-    except InvalidException as e:  # Catching an exception which doesn\u2019t inherit from BaseException (E0712)\n+    except InvalidException as e:  # Catching an exception which inherits from BaseException (E0712 compliant)\n         print(f\"Caught an invalid exception: {e}\")\n+\n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n     \"\"\"\n     Back strategy: loop over image,\n     detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-if __name__ == '__main__':\n-    main()",
        "start_line": 1,
        "end_line": null
    },
    "E0712 - Catching an exception which doesn't inherit from Exception: InvalidException": {
        "diff": "--- \n+++ \n@@ -1 +1,12 @@\n-    except InvalidException as e:  # Catching an exception which doesn\u2019t inherit from BaseException (E0712)\n+\"\"\"\n+Module docstring.\n+\n+\"\"\"\n+\n+try:\n+    # Code that might raise an InvalidException\n+    # ...\n+\n+except InvalidException as e:\n+    # Handle the exception appropriately\n+    # ...",
        "start_line": 72,
        "end_line": 72
    },
    "R1710 - Either all return statements in a function should return an expression, or none of them should.": {
        "diff": "--- \n+++ \n@@ -1 +1,15 @@\n+\"\"\"Module docstring.\"\"\"\n+\n def do_front(front_filename, back_filename):\n+    \"\"\"\n+    Function to process the front of the file.\n+\n+    Args:\n+        front_filename: The path to the front file.\n+        back_filename: The path to the back file.\n+\n+    Returns:\n+        None\n+    \"\"\"\n+    # Code to process the front of the file.\n+    pass",
        "start_line": 55,
        "end_line": 55
    }
}