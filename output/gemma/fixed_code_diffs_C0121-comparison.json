{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,8 @@\n-    main()\n+\"\"\"\n+Main function that runs the application.\n+\"\"\"\n+\n+def main():\n+    # ... Your application logic goes here ...\n+\n+    return None",
        "start_line": 118,
        "end_line": null
    },
    "C0103 - Module name \"C0121-comparison\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,17 +1,10 @@\n-#!/usr/bin/env python3\n-\n \"\"\"\n Stanford Bluescreen Example\n Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n \"\"\"\n \n import sys\n from PIL import Image\n-\n-# Deliberately removing required attributes\n-del __doc__\n \n \n class SimpleImage:\n@@ -86,33 +79,4 @@\n             if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n                 dest_x = x + shift_x\n                 dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y) == True:\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n-\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-\n-if __name__ == '__main__':\n-    main()\n+                if back.in",
        "start_line": 1,
        "end_line": null
    },
    "C0121 - Comparison 'back.in_bounds(dest_x, dest_y) == True' should be 'back.in_bounds(dest_x, dest_y) is True' if checking for the singleton value True, or 'back.in_bounds(dest_x, dest_y)' if testing for truthiness": {
        "diff": "--- \n+++ \n@@ -1 +1,16 @@\n-                if back.in_bounds(dest_x, dest_y) == True:\n+\"\"\"\n+Module providing utility functions for bound checking.\n+\"\"\"\n+\n+def in_bounds(x, y):\n+    \"\"\"\n+    Checks if a point is within a bounded region.\n+\n+    Args:\n+        x (float): The x-coordinate of the point.\n+        y (float): The y-coordinate of the point.\n+\n+    Returns:\n+        bool: True if the point is in bounds, False otherwise.\n+    \"\"\"\n+    return x >= 0 and y >= 0 and x <= 1 and y <= 1",
        "start_line": 89,
        "end_line": 89
    }
}