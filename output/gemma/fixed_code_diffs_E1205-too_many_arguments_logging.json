{
    "C0301 - Line too long (149/100)": {
        "diff": "--- \n+++ \n@@ -1,28 +1,34 @@\n-        logging.info(\"Image loaded with dimensions %dx%d\", self.width, self.height, filename)  # Too many arguments for logging format string (E1205)\n+\"\"\"SimpleImage module\"\"\"\n \n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n+\"\"\"\n+This module provides a basic image manipulation API.\n+\"\"\"\n \n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n+import sys\n \n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n+def get_pixel(self, x, y):\n+    \"\"\"\n+    Get the pixel value at the given (x, y) coordinates.\n+    \"\"\"\n+    return self.pixels[x, y]\n \n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n+def set_pixel(self, x, y, color):\n+    \"\"\"\n+    Set the pixel value at the given (x, y) coordinates.\n+    \"\"\"\n+    self.pixels[x, y] = color\n+\n+def in_bounds(self, x, y):\n+    \"\"\"\n+    Check if the given (x, y) coordinates are within the image bounds.\n+    \"\"\"\n+    return 0 <= x < self.width and 0 <= y < self.height\n+\n+def show(self):\n+    \"\"\"\n+    Display the image.\n+    \"\"\"\n+    self.image.show()\n \n def do_front(front_filename, back_filename):\n     \"\"\"",
        "start_line": 28,
        "end_line": null
    },
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,14 @@\n+```python\n+\"\"\"\n+This is the main module.\n+\"\"\"\n+\n+def main():\n+    \"\"\"\n+    This function is the entry point for the program.\n+    \"\"\"\n+    # Your code goes here\n+    pass\n+\n+if __name__ == \"__main__\":\n     main()",
        "start_line": 114,
        "end_line": null
    },
    "C0103 - Module name \"E1205-too_many_arguments_logging\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,10 +1,7 @@\n-#!/usr/bin/env python3\n-\n \"\"\"\n Stanford Bluescreen Example\n Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n+\n \"\"\"\n \n import sys\n@@ -25,7 +22,7 @@\n         self.image = Image.open(filename)\n         self.pixels = self.image.load()\n         self.width, self.height = self.image.size\n-        logging.info(\"Image loaded with dimensions %dx%d\", self.width, self.height, filename)  # Too many arguments for logging format string (E1205)\n+        logging.info(\"Image loaded with dimensions %dx%d\", self.width, self.height, filename)\n \n     def get_pixel(self, x, y):\n         \"\"\"\n@@ -51,6 +48,7 @@\n         \"\"\"\n         self.image.show()\n \n+\n def do_front(front_filename, back_filename):\n     \"\"\"\n     Front strategy: loop over front image,\n@@ -68,6 +66,7 @@\n                 image.set_pixel(x, y, back_pixel)\n     return image\n \n+\n def do_back(front_filename, shift_x, shift_y, back_filename):\n     \"\"\"\n     Back strategy: loop over image,\n@@ -78,37 +77,3 @@\n     \"\"\"\n     image = SimpleImage(front_filename)\n     back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-if __name__ == '__main__':\n-    main()",
        "start_line": 1,
        "end_line": null
    },
    "E1205 - Too many arguments for logging format string": {
        "diff": "--- \n+++ \n@@ -1 +1,17 @@\n-        logging.info(\"Image loaded with dimensions %dx%d\", self.width, self.height, filename)  # Too many arguments for logging format string (E1205)\n+```python\n+\"\"\"Image loader module\"\"\"\n+\n+import logging\n+\n+def load_image(filename):\n+    \"\"\"Loads an image file and returns its dimensions.\n+\n+    Args:\n+        filename: The path to the image file.\n+\n+    Returns:\n+        A tuple of the image's width and height.\n+    \"\"\"\n+\n+    logging.info(\"Image loaded with dimensions %dx%d\", (self.width, self.height), filename)\n+    # ... remaining code ...",
        "start_line": 28,
        "end_line": 28
    }
}