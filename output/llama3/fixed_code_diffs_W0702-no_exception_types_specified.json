{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,4 @@\n-    main()\n+# module docstring for main.py\n+def main():\n+    \"\"\"This is the main function\"\"\"\n+    print(\"Hello\")",
        "start_line": 113,
        "end_line": null
    },
    "C0103 - Module name \"W0702-no_exception_types_specified\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -10,42 +10,13 @@\n import sys\n from PIL import Image\n \n+__module_doc__ = \"This is the Stanford Bluescreen example module.\"\n+\n class SimpleImage:\n     \"\"\"\n     A wrapper class for PIL Image to facilitate pixel manipulation.\n     \"\"\"\n-    def __init__(self, filename):\n-        \"\"\"\n-        Initialize the SimpleImage with a given filename.\n-        Load the image and get its size.\n-        \"\"\"\n-        self.image = Image.open(filename)\n-        self.pixels = self.image.load()\n-        self.width, self.height = self.image.size\n-\n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n-\n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n-\n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n-\n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n+    # ... (no changes needed here)\n \n def do_front(front_filename, back_filename):\n     \"\"\"\n@@ -64,8 +35,8 @@\n                     back_pixel = back.get_pixel(x, y)\n                     image.set_pixel(x, y, back_pixel)\n         return image\n-    except:  # No exception type(s) specified (W0702)\n-        print(\"An error occurred\")\n+    except Exception as e:  # Specific exception type(s) specified (W0702)\n+        print(\"An error occurred:\", str(e))\n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n     \"\"\"\n@@ -75,17 +46,7 @@\n     Pixels which fall outside of the background are ignored.\n     Return changed back image.\n     \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n+    # ... (no changes needed here)\n \n def main():\n     \"\"\"",
        "start_line": 1,
        "end_line": null
    },
    "W0702 - No exception type(s) specified": {
        "diff": "--- \n+++ \n@@ -1,2 +1,11 @@\n-    except:  # No exception type(s) specified (W0702)\n-        print(\"An error occurred\")\n+def handle_error():\n+    \"\"\"\n+    Handle an error by printing an error message.\n+\n+    :return: None\n+    \"\"\"\n+    try:\n+        # Code that might raise an exception goes here\n+        pass  # Replace with actual code\n+    except Exception as e:  # Use a specific exception type(s) (E1101)\n+        print(\"An error occurred:\", str(e))  # Print the error message",
        "start_line": 67,
        "end_line": 68
    },
    "R1710 - Either all return statements in a function should return an expression, or none of them should.": {
        "diff": "--- \n+++ \n@@ -1 +1,4 @@\n-def do_front(front_filename, back_filename):\n+def do_front(front_filename: str, back_filename: str) -> None:\n+    \"\"\"\n+    Docstring explaining what this function does.\n+    \"\"\"",
        "start_line": 50,
        "end_line": 50
    }
}