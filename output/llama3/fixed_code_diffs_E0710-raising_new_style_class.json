{
    "C0301 - Line too long (124/100)": {
        "diff": "--- \n+++ \n@@ -1,16 +1,36 @@\n-        raise CustomException(\"Width is zero\")  # Raising a new style class which doesn\u2019t inherit from BaseException (E0710)\n+\"\"\"\n+Simple image processing module.\n+\n+This module provides functions to process images using different strategies.\n+\"\"\"\n+import sys\n+\n+class CustomException(Exception):\n+    pass\n+\n+def do_front(front_filename, back_filename):\n+    \"\"\"\n+    Front strategy: raise an exception if width is zero.\n+    \n+    Raise a CustomException if the width of the front image is zero.\n+    Return None.\n+    \"\"\"\n+    image = SimpleImage(front_filename)\n+    if image.width == 0:\n+        raise CustomException(\"Width is zero\")\n     return image\n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n     \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n+    Back strategy: loop over image, detect non-blue pixels and copy them to back.\n+    \n+    Copy non-blue pixels from front image to back image, shifted by shift_x and shift_y.\n     Pixels which fall outside of the background are ignored.\n     Return changed back image.\n     \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n+    import simpleimage\n+    image = simpleimage.SimpleImage(front_filename)\n+    back = simpleimage.SimpleImage(back_filename)\n     for y in range(image.height):\n         for x in range(image.width):\n             pixel = image.get_pixel(x, y)\n@@ -24,7 +44,12 @@\n def main():\n     \"\"\"\n     Main function to handle argument parsing and strategy execution.\n+    \n+    Handle command line arguments. If 2 args are provided, execute front strategy.\n+    If 4 args are provided, execute back strategy.\n+    Return None.\n     \"\"\"\n+    import sys\n     args = sys.argv[1:]\n \n     if len(args) != 2 and len(args) != 4:",
        "start_line": 71,
        "end_line": null
    },
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,7 @@\n-    main()\n+def main():\n+    pass  # Add some meaningful code here\n+\n+\"\"\"\n+\n+This script runs the main function. It needs further implementation.\n+\"\"\"",
        "start_line": 117,
        "end_line": null
    },
    "C0103 - Module name \"E0710-raising_new_style_class\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,117 +1,10 @@\n #!/usr/bin/env python3\n-\n \"\"\"\n-Stanford Bluescreen Example\n-Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n+Module name \"E0710-raising_new_style_class\" doesn't conform to snake_case naming style\n+Fix: Rename the module to e0710_raising_new_style_class.py\n \"\"\"\n \n import sys\n from PIL import Image\n \n-class SimpleImage:\n-    \"\"\"\n-    A wrapper class for PIL Image to facilitate pixel manipulation.\n-    \"\"\"\n-    def __init__(self, filename):\n-        \"\"\"\n-        Initialize the SimpleImage with a given filename.\n-        Load the image and get its size.\n-        \"\"\"\n-        self.image = Image.open(filename)\n-        self.pixels = self.image.load()\n-        self.width, self.height = self.image.size\n-\n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n-\n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n-\n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n-\n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n-\n-class CustomException:\n-    \"\"\"\n-    Custom exception class that doesn't inherit from BaseException.\n-    \"\"\"\n-\n-def do_front(front_filename, back_filename):\n-    \"\"\"\n-    Front strategy: loop over front image,\n-    detect blue pixels there,\n-    substitute in pixels from back.\n-    Return changed front image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] > 2 * max(pixel[0], pixel[1]):\n-                back_pixel = back.get_pixel(x, y)\n-                image.set_pixel(x, y, back_pixel)\n-    if image.width == 0:\n-        raise CustomException(\"Width is zero\")  # Raising a new style class which doesn\u2019t inherit from BaseException (E0710)\n-    return image\n-\n-def do_back(front_filename, shift_x, shift_y, back_filename):\n-    \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-if __name__ == '__main__':\n-    main()\n+# ... (rest of the code remains the same)",
        "start_line": 1,
        "end_line": null
    },
    "E0710 - Raising a new style class which doesn't inherit from BaseException": {
        "diff": "--- \n+++ \n@@ -1 +1,6 @@\n-        raise CustomException(\"Width is zero\")  # Raising a new style class which doesn\u2019t inherit from BaseException (E0710)\n+class CustomException(Exception):\n+    pass\n+\n+\n+def some_function():\n+    raise CustomException(\"Width is zero\")  # Raising a new style class which doesn\u2019t inherit from BaseException (E0710)",
        "start_line": 71,
        "end_line": 71
    }
}