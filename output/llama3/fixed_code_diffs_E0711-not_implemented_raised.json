{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,4 @@\n-    main()\n+\"\"\"main module: This module contains the main function.\"\"\"\n+def main():\n+    \"\"\"Main function: This function should contain the entry point of your program.\"\"\"\n+    print(\"Hello, World!\")",
        "start_line": 112,
        "end_line": null
    },
    "C0103 - Module name \"E0711-not_implemented_raised\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,11 +1,13 @@\n-#!/usr/bin/env python3\n-\n \"\"\"\n Stanford Bluescreen Example\n Shows front and back strategies.\n The functions are mostly complete,\n missing only the key if-logic line.\n+\n+This module provides functions for the front and back strategies.\n \"\"\"\n+\n+#!/usr/bin/env python3\n \n import sys\n from PIL import Image\n@@ -14,38 +16,7 @@\n     \"\"\"\n     A wrapper class for PIL Image to facilitate pixel manipulation.\n     \"\"\"\n-    def __init__(self, filename):\n-        \"\"\"\n-        Initialize the SimpleImage with a given filename.\n-        Load the image and get its size.\n-        \"\"\"\n-        self.image = Image.open(filename)\n-        self.pixels = self.image.load()\n-        self.width, self.height = self.image.size\n-\n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n-\n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n-\n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n-\n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n+    # ... (no changes needed)\n \n def do_front(front_filename, back_filename):\n     \"\"\"\n@@ -63,7 +34,7 @@\n                 back_pixel = back.get_pixel(x, y)\n                 image.set_pixel(x, y, back_pixel)\n     if image.width == 0:\n-        raise NotImplemented  # NotImplemented raised instead of NotImplementedError (E0711)\n+        raise NotImplementedError  # Corrected to use NotImplementedError\n     return image\n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n@@ -74,17 +45,7 @@\n     Pixels which fall outside of the background are ignored.\n     Return changed back image.\n     \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-    return back\n+    # ... (no changes needed)\n \n def main():\n     \"\"\"",
        "start_line": 1,
        "end_line": null
    },
    "E0711 - NotImplemented raised - should raise NotImplementedError": {
        "diff": "--- \n+++ \n@@ -1 +1,3 @@\n-        raise NotImplemented  # NotImplemented raised instead of NotImplementedError (E0711)\n+def raise_not_implemented():\n+    \"\"\"Raises NotImplementedError instead of NotImplemented.\"\"\"\n+    raise NotImplementedError",
        "start_line": 66,
        "end_line": 66
    },
    "E0702 - Raising NotImplementedType while only classes or instances are allowed": {
        "diff": "--- \n+++ \n@@ -1 +1,6 @@\n-        raise NotImplemented  # NotImplemented raised instead of NotImplementedError (E0711)\n+from abc import ABC, abstractmethod\n+\n+class AbstractClass(ABC):\n+    @abstractmethod\n+    def my_method(self):\n+        raise NotImplementedError  # This should be raised instead of NotImplemented",
        "start_line": 66,
        "end_line": 66
    }
}