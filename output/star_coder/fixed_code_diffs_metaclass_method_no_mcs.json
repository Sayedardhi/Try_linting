{
    "C0203 - Metaclass method create_instance should have 'cls' as first argument": {
        "diff": "--- \n+++ \n@@ -1 +1,55 @@\n-    def create_instance(not_mcs, cls, filename):\n+\n+\n+        \"\"\"\n+        if self.args['--pylint-fixer']:\n+            return self.run_pylint_fixer(self.filename)\n+        elif self.args['--pylint-report']:\n+            return self.run_pylint_report()\n+        else:\n+            raise Exception('Please provide either the --pylint-fixer or --pylint-report flag')\n+\n+\n+    def run_pylint_report(self):\n+        \"\"\"\n+            This function runs pylint against the code and returns the report in json format\n+\n+            **Arguments**\n+            self.filename (str) : Name of the file that is being linted\n+\n+            **Returns**:\n+            JSON representation of the output from pylintr, or False if an error occurs\n+\n+        \"\"\"\n+        try:\n+            #pylint --msg-template=\"[{line},{column}] {msg_id}: {msg}\" -f json $filename\n+            command = 'pylint --msg-template=\"{line},{column},{symbol}:{msg_id} : {msg}\" -f json {}'.format(self.filename)\n+            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n+            report = result.stdout.decode('utf-8')\n+        except:\n+            report = False\n+\n+        return report\n+\n+\n+    def run_pylint_fixer(self, filename):\n+        \"\"\"\n+            This function runs pylint against the code and returns the corrected version in json format\n+\n+            **Arguments**\n+            self.filename (str) : Name of the file that is being linted\n+\n+            **Returns**:\n+            JSON representation of the output from pylintr, or False if an error occurs\n+\n+        \"\"\"\n+        try:\n+            #pylint --msg-template=\"[{line},{column}] {msg_id}: {msg}\" -f json $filename\n+            command = 'pylint --msg-template=\"{line},{column},{symbol}:{msg_id} : {msg}\" -f json --disable={rule_id} {}'.format(\n+                filename, '--disable=all', ) # --msg-template=\"[{line},{column}] {msg_id}: {msg}\"\n+            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n+            report = result.stdout.decode('utf-8')\n+        except:\n+            report = False\n+\n+        return report\n+",
        "start_line": 24,
        "end_line": 24
    }
}