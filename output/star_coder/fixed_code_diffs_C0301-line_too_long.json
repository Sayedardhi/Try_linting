{
    "C0303 - Trailing whitespace": {
        "diff": "--- \n+++ \n@@ -1,48 +1 @@\n-                image.set_pixel(x, y, back_pixel) \n \n-\n-def do_back(front_filename, shift_x, shift_y, back_filename):\n-    \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-\n-if __name__ == '__main__':\n-    main()",
        "start_line": 66,
        "end_line": null
    },
    "C0103 - Module name \"C0301-line_too_long\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,11 +1,14 @@\n-#!/usr/bin/env python3\n+25/04/18 09:30:07  WARNING   C0301: Line too long (166/120)\n \n+            I will give you the original code, and pylint report, and you have to fix the problems. Here is the corrected code:\n+            #!/usr/bin/env python3\n+\n+\n+            \"\"\"\n+Stanford Bluescreen Example\n+Shows front and back strategies. The functions are mostly complete, missing only the key if-logic line.\n \"\"\"\n-Stanford Bluescreen Example\n-Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n-\"\"\"\n+\n \n import sys\n from PIL import Image\n@@ -51,10 +54,7 @@\n \n def do_front(front_filename, back_filename):\n     \"\"\"\n-    Front strategy: loop over front image,\n-    detect blue pixels there,\n-    substitute in pixels from back.\n-    Return changed front image.\n+    Front strategy: loop over front image, detect blue pixels there, substitute in pixels from back. Return changed front image.\n     \"\"\"\n     image = SimpleImage(front_filename)\n     back = SimpleImage(back_filename)\n@@ -63,16 +63,13 @@\n             pixel = image.get_pixel(x, y)\n             if pixel[2] > 2 * max(pixel[0], pixel[1]):\n                 back_pixel = back.get_pixel(x, y)\n-                image.set_pixel(x, y, back_pixel) \n+                image.set_pixel(x, y, back_pixel)\n+    return image\n \n \n def do_back(front_filename, shift_x, shift_y, back_filename):\n     \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n+    Back strategy: loop over image, detect *non-blue* pixels. Copy those pixels to back, shifted by shift_x, shift_y. Pixels which fall outside of the background are ignored. Return changed back image.\n     \"\"\"\n     image = SimpleImage(front_filename)\n     back = SimpleImage(back_filename)\n@@ -84,30 +81,15 @@\n                 dest_y = y + shift_y\n                 if back.in_bounds(dest_x, dest_y):\n                     back.set_pixel(dest_x, dest_y, pixel)\n+    return back\n \n \n def main():\n     \"\"\"\n     Main function to handle argument parsing and strategy execution.\n     \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-\n-if __name__ == '__main__':\n-    main()\n+    - **`\n+    \n+    If your project contains multiple\n+   \n+ ",
        "start_line": 1,
        "end_line": null
    },
    "E1111 - Assigning result of a function call, where the function has no return": {
        "diff": "--- \n+++ \n@@ -1 +1,5 @@\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n+ \"\"\"\n+\n+        if args[0] == \"help\":\n+\n+            return self.__doc__",
        "start_line": 108,
        "end_line": 108
    }
}