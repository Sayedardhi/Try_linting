{
    "C0202 - Class method invalid_class_method should have 'cls' as first argument": {
        "diff": "--- \n+++ \n@@ -1 +1,95 @@\n-    def invalid_class_method(not_cls, width, height):\n+\n+\n+        \"\"\"\n+        # Get the code from clipboard if any exists\n+        try:\n+            # Clipboard does not work on macOS, so we need to use pyperclip for now.\n+            code = self._clipboard_get()\n+            if code is None or len(code) == 0:\n+                return \"\"\n+\n+            # Make sure code has a newline at the end\n+            if code[-1] != \"\\n\":\n+                code += \"\\n\"\n+\n+        except Exception as e:\n+            log(f\"Error reading clipboard content. {e}\")\n+            return \"\"\n+\n+        try:\n+            pylint_args = [\n+                \"run\", \n+                \"--disable=all\",\n+                f\"{self._filename}\", \n+            ]\n+\n+            # Run PyLint with the arguments\n+            report, exit_code = self._pylint(pylint_args)\n+\n+            if exit_code != 0 or report is None:\n+                return \"\"\n+            \n+            report.sort()\n+\n+        except Exception as e:\n+            log(f\"Error running pylint. {e}\")\n+            return \"\"\n+\n+        # Convert to string\n+        report_string = \"\\n\".join([f\"{r}\" for r in report])\n+        \n+        # Add header and footer\n+        report_string = f\"\"\"{report_header}\\n\\n{report_string}\\n\\n{report_footer}\"\"\"\n+        \n+        return report_string\n+\n+    @staticmethod\n+    def _run(pylint_args):\n+        \"\"\"Runs the specified pylint command. Returns stdout and exit code.\"\"\"\n+\n+        # Run PyLint with the arguments\n+        try:\n+            result = subprocess.run(\n+                pylint_args, \n+                capture_output=True,\n+                text=True,\n+                check=False)\n+\n+            return result.stdout, result.returncode\n+        \n+        except Exception as e:\n+            raise RuntimeError(f\"Error running pylint. {e}\")\n+\n+    @staticmethod\n+    def _pylint(pylint_args):\n+        \"\"\"Runs the specified pylint command and returns report and exit code.\"\"\"\n+\n+        # Run PyLint with the arguments\n+        try:\n+            result = subprocess.run(\n+                [\"pylint\"] + [\n+                    \"--disable=all\",\n+                    f\"{filename}\" for filename in pylint_args], \n+                capture_output=True,\n+                text=True,\n+                check=False)\n+\n+            return result.stdout, result.returncode\n+        \n+        except Exception as e:\n+            raise RuntimeError(f\"Error running pylint. {e}\")\n+\n+    @staticmethod\n+    def _clipboard_get():\n+        \"\"\"Returns clipboard contents.\"\"\"\n+\n+        try:\n+            # Clipboard does not work on macOS, so we need to use pyperclip for now.\n+            with tempfile.TemporaryFile() as tmp:\n+                pyperclip.copy(tmp)\n+\n+                return tmp.read().decode(\"utf-8\")\n+        \n+        except Exception as e:\n+            log(f\"Error reading clipboard content. {e}\")\n+            return None",
        "start_line": 63,
        "end_line": 63
    }
}