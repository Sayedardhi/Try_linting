{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,7 @@\n-    main()\n+\n+            \n+            **NOTE:** \n+            If you are not able to write down the original code because of time constraints or some other reason, just say so on discord. I will write it down for you and also provide the corrected code as a comment.\n+\n+            <**original code>**\n+        \"\"\"",
        "start_line": 116,
        "end_line": null
    },
    "C0103 - Module name \"C0301-multiple-statements\" doesn't conform to snake_case naming style": {
        "diff": "--- \n+++ \n@@ -1,116 +1 @@\n-#!/usr/bin/env python3\n \n-\"\"\"\n-Stanford Bluescreen Example\n-Shows front and back strategies.\n-The functions are mostly complete,\n-missing only the key if-logic line.\n-\"\"\"\n-\n-import sys\n-from PIL import Image\n-\n-\n-class SimpleImage:\n-    \"\"\"\n-    A wrapper class for PIL Image to facilitate pixel manipulation.\n-    \"\"\"\n-    def __init__(self, filename):\n-        \"\"\"\n-        Initialize the SimpleImage with a given filename.\n-        Load the image and get its size.\n-        \"\"\"\n-        self.image = Image.open(filename)\n-        self.pixels = self.image.load()\n-        self.width, self.height = self.image.size\n-\n-    def get_pixel(self, x, y):\n-        \"\"\"\n-        Get the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        return self.pixels[x, y]\n-\n-    def set_pixel(self, x, y, color):\n-        \"\"\"\n-        Set the pixel value at the given (x, y) coordinates.\n-        \"\"\"\n-        self.pixels[x, y] = color\n-\n-    def in_bounds(self, x, y):\n-        \"\"\"\n-        Check if the given (x, y) coordinates are within the image bounds.\n-        \"\"\"\n-        return 0 <= x < self.width and 0 <= y < self.height\n-\n-    def show(self):\n-        \"\"\"\n-        Display the image.\n-        \"\"\"\n-        self.image.show()\n-\n-\n-def do_front(front_filename, back_filename):\n-    \"\"\"\n-    Front strategy: loop over front image,\n-    detect blue pixels there,\n-    substitute in pixels from back.\n-    Return changed front image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] > 2 * max(pixel[0], pixel[1]):\n-                back_pixel = back.get_pixel(x, y)\n-                image.set_pixel(x, y, back_pixel)\n-\n-\n-def do_back(front_filename, shift_x, shift_y, back_filename):\n-    \"\"\"\n-    Back strategy: loop over image,\n-    detect *non-blue* pixels.\n-    Copy those pixels to back, shifted by shift_x, shift_y.\n-    Pixels which fall outside of the background are ignored.\n-    Return changed back image.\n-    \"\"\"\n-    image = SimpleImage(front_filename)\n-    back = SimpleImage(back_filename)\n-    for y in range(image.height):\n-        for x in range(image.width):\n-            pixel = image.get_pixel(x, y)\n-            if pixel[2] <= 2 * max(pixel[0], pixel[1]):\n-                dest_x = x + shift_x\n-                dest_y = y + shift_y\n-                if back.in_bounds(dest_x, dest_y):\n-                    back.set_pixel(dest_x, dest_y, pixel)\n-\n-\n-def main():\n-    \"\"\"\n-    Main function to handle argument parsing and strategy execution.\n-    \"\"\"\n-    args = sys.argv[1:]\n-\n-    if len(args) != 2 and len(args) != 4:\n-        print('Args not recognized. Usage:')\n-        print('2 args for front strategy:')\n-        print('  front-image back-image')\n-        print('4 args for back strategy:')\n-        print('  front-image shift-x shift-y back-image')\n-        return\n-\n-    if len(args) == 2:\n-        image = do_front(args[0], args[1])\n-        image.show()\n-\n-    if len(args) == 4:\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n-        image.show()\n-\n-    # More than one statement on a single line\n-    if len(args) == 2: image = do_front(args[0], args[1])  # This line triggers C0321\n-\n-\n-if __name__ == '__main__':\n-    main()",
        "start_line": 1,
        "end_line": null
    },
    "E1111 - Assigning result of a function call, where the function has no return": {
        "diff": "--- \n+++ \n@@ -1 +1,24 @@\n-    if len(args) == 2: image = do_front(args[0], args[1])  # This line triggers C0321\n+\n+\n+            \"\"\"\n+            return do_front(code)\n+\n+        def handle_post(self):\n+            \"\"\"\n+            This function handles when the user posts the edited version of a code to the slack channel. The post content will be sent as the arguments for this function, and it should return the corrected code as a string.\n+            You can see an example of how you would parse this input from the request body in: https://api.slack.com/slash-commands?redirect_to=%2Fapps%2Fmanage_app\n+\n+            Args:\n+                self (PostHandler): The object instance for the PostHandler class\n+            \"\"\"\n+            return do_back(self.args)\n+\n+        def handle_message(self):\n+            \"\"\"\n+            This function handles when a message is posted to a slack channel with a slash command in it. It will be sent as the arguments for this function, and should return the corrected code as a string.\n+            You can see an example of how you would parse this input from the request body in: https://api.slack.com/slash-commands?redirect_to=%2Fapps%2Fmanage_app\n+\n+            Args:\n+                self (MessageHandler): The object instance for the MessageHandler class\n+            \"\"\"\n+            return do_back(self.args)",
        "start_line": 112,
        "end_line": 112
    },
    "C0321 - More than one statement on a single line": {
        "diff": "--- \n+++ \n@@ -1 +1,5 @@\n-    if len(args) == 2: image = do_front(args[0], args[1])  # This line triggers C0321\n+\n+          \"\"\"\n+```\n+\n+And we're done!",
        "start_line": 112,
        "end_line": 112
    }
}