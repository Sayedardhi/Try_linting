{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,18 @@\n-    main()\n+\n+### Code Coverage Tests\n+- Test coverage should be at least 90%! (with optional bonus points for tests)\n+    - You can use any test framework that you want, but pytest is recommended and tested as well.\n+- The tests can be run via the terminal by typing `make test` in the root directory of the project, or alternatively they can also be run from a specific file with: \n+    ```bash\n+    python3 -m unittest test_file.py\n+    ```\n+### Documentation \n+- Add detailed documentation to your code!\n+    - Use type hints as much as you can for improved readability and maintainability (e.g.: `x: int`, not just `x`)\n+    - Comment the functions, classes, variables, etc., so that they are easy to understand what is happening in the function/class/variable\n+    - Include docstrings at the beginning of any function/method to provide information about its use\n+- For your documentation, you can also use: \n+    ```bash\n+    make docs\n+    ```\n+    ",
        "start_line": 111,
        "end_line": null
    },
    "E1111 - Assigning result of a function call, where the function has no return": {
        "diff": "--- \n+++ \n@@ -1 +1,163 @@\n-        image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n+\n+    \n+    \"\"\"\n+    image = do_back(args[0], int(args[1]), int(args[2]), args[3])\n+\n+    return f'```\\n{image}\\n```'\n+\n+\n+@bot.command()\n+async def coginfo():\n+    \"\"\"\n+        This function returns the name of all commands available in the bot.\n+        \n+        **USAGE:**\n+            ```python\n+             @bot.command()\n+             async def coginfo():\n+                 \"\"\"\n+                     Returns a list with the names and descriptions for all commands available in the bot\n+                 \n+                 **USAGE:**\n+                     ```python\n+                      @bot.command()\n+                      async def coginfo():\n+                          pass\n+                      ```\n+                 \"\"\"\n+             \n+                 return f\"{bot.commands}\\n\"\n+            ```\n+    \"\"\"\n+    \n+    return f\"{bot.commands}\"\n+\n+\n+@bot.command(name=\"ping\")\n+async def ping_command():\n+    \"\"\"\n+        This function pong's the user that executed the command\n+\n+        **USAGE:**\n+            ```python\n+             @bot.command()\n+             async def ping():\n+                 \"\"\"\n+                     Pongs the user that triggered the command\n+                 \n+                 **USAGE:**\n+                     ```python\n+                      @bot.command()\n+                      async def ping():\n+                          pass\n+                      ```\n+                 \"\"\"\n+             \n+                 await ctx.send(f\"Pong! {round(bot.latency * 1000)}ms\")\n+            ```\n+    \"\"\"\n+\n+    await ctx.send(f\"Pong! {round(bot.latency * 1000)}ms\")\n+\n+\n+@bot.command()\n+async def clear():\n+    \"\"\"\n+        This function clears the channel that the command was used in.\n+\n+        **USAGE:**\n+            ```python\n+             @bot.command()\n+             async def clear():\n+                 \"\"\"\n+                     Clears all messages from current channel\n+                 \n+                 **USAGE:**\n+                     ```python\n+                      @bot.command()\n+                      async def clear():\n+                          pass\n+                      ```\n+                 \"\"\"\n+             \n+                 await ctx.channel.purge(limit=99)\n+            ```\n+    \"\"\"\n+\n+    await ctx.channel.purge(limit=99)\n+\n+\n+@bot.command()\n+async def eval():\n+    \"\"\"\n+        This function allows the user to execute code within the bot's environment\n+\n+        **USAGE:**\n+            ```python\n+             @bot.command()\n+             async def eval():\n+                 \"\"\"\n+                     Allows for execution of Python code, with a result being sent back\n+                 \n+                 **USAGE:**\n+                     ```python\n+                      @bot.command()\n+                      async def eval():\n+                          pass\n+                      ```\n+                 \"\"\"\n+             \n+                 try:\n+                    await ctx.send(f\"```py\\n{eval(await ctx.message.content[7:])}\\n```\")\n+                 except Exception as e:\n+                    await ctx.send(f\"{e}\")\n+            ```\n+    \"\"\"\n+\n+    try:\n+        await ctx.send(f\"```py\\n{eval(await ctx.message.content[7:])}\\n```\")\n+    except Exception as e:\n+        await ctx.send(f\"{e}\")\n+\n+\n+@bot.command()\n+async def source():\n+    \"\"\"\n+        This function displays the code for a specific file or module\n+\n+        **USAGE:**\n+            ```python\n+             @bot.command()\n+             async def source():\n+                 \"\"\"\n+                     Displays the source code of any Python file in the repo\n+                 \n+                 **USAGE:**\n+                     ```python\n+                      @bot.command()\n+                      async def source():\n+                          pass\n+                      ```\n+                 \"\"\"\n+             \n+                 if ctx.message.content == \"source\":\n+                    await ctx.send(\"https://github.com/ChristopherHayes1/Discord-Image-Back-Up\")\n+                 elif ctx.message.content[8:] in bot.__dict__.keys():\n+                     await ctx.send(f\"```py\\n{bot.__dict__[ctx.message.content[8:]]}\\n```\")\n+                 else:\n+                    try:\n+                        await ctx.send(f'```py\\n{open(ctx.message.content[8:], \"r\").read()}\\n```')\n+                    except Exception as e:\n+                        await ctx.send(\"https://github.com/ChristopherHayes1/Discord-Image-Back-Up\")\n+            ```\n+    \"\"\"\n+\n+    if ctx.message.content == \"source\":\n+        await ctx.send(\"https://github.com/ChristopherHayes1/Discord-Image-Back-Up\")\n+    elif ctx.message.content[8:] in bot.__dict__.keys():\n+        await ctx.send(f\"```py\\n{bot.__dict__[ctx.message.content[8:]]}\\n```\")\n+    else:\n+        try:\n+            await ctx.send(f'```py\\n{open(ctx.message.content[8:], \"r\").read()}\\n```')\n+        except Exception as e:\n+            await ctx.send(\"https://github.com/ChristopherHayes1/Discord-Image-Back-Up\")",
        "start_line": 106,
        "end_line": 106
    }
}