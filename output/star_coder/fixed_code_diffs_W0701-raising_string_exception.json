{
    "C0304 - Final newline missing": {
        "diff": "--- \n+++ \n@@ -1 +1,38 @@\n+3) You are done!\n+    \"\"\"\n+\n+    original_code = get_original_code(file_name)\n+    original_file_path = str(Path(__file__).parent / '..' / 'data/fixers/fixer_base.py')\n+    fixer_rules_text, module_docstring_text, docstring_text = lint_rule.get_lint_rule_details(original_code=original_code,\n+                                                                                                original_file_path=original_file_path)\n+\n+    if fixer_rules_text and module_docstring_text and docstring_text:\n+        print('You are a post pylint fixer.\\nI will give you the original code,\\nand pylint report, and you have to fix the problems.\\n'\n+              'Here is the code:\\n')\n+\n+        pprint.pprint(original_code)\n+        print('\\nHere is the pylint report:\\n')\n+\n+        print(f'{fixer_rules_text}\\n{module_docstring_text}\\n{docstring_text}')\n+        print('\\n**STRICTLY FOLLOW THE RULES BELOW:**\\n'\n+              '- Do not introduce unrelated code, or unrelated fixes.\\n'\n+              '- Every function should have a docstring. If missing, add a docstring to the function.\\n'\n+              '- Don\\'t uncomment code that is commented out.\\n'\n+              '- Don\\'t just say \"insert original code here\", actually provide the corrected code.\\n'\n+              '- Don\\'t change the functionality of the code. As in, for example, don\\'t just make a recursive function iterative because you want to when that was not prompted by the linter. \\n'\n+              '- If a line or variable needs to be removed, clearly indicate it.\\n'\n+              '- Return only the corrected code within the specific markers, and provide a rationale for each change.\\n'\n+              '- Add a module docstring at the beginning of the code if missing, as suggested by the linter. You can use the name of the file as the module name. \\n'\n+              '- If a linting rule requires you to break up a line of code or add a line, please do so.\\n'\n+              '- Do not put random imports that were not part of the original code.\\n'\n+              '- Do not just leave sections of the code to be filled in by the user; fully complete the code. \\n'\n+              '- Do not just disable the linter warning but actually fix it\\n'\n+              '- It is imperative that you do not change the functionality of the code unless directly needed by the linter. So keep most of the code from the original file and fix what\\'s needed. This is imperative, as the code is being linted for a specific purpose, and changing the functionality could have unintended consequences.\\n'\n+              f'- Return the response in the following format:\\n```python\\n{original_code}\\n```')\n+\n+    else:\n+        print('Looks like there are no problems with your code. No need to fix anything.')\n+\n+\n+if __name__ == '__main__':\n     main()",
        "start_line": 112,
        "end_line": null
    },
    "E0702 - Raising str while only classes or instances are allowed": {
        "diff": "--- \n+++ \n@@ -1 +1,96 @@\n-        raise \"Width is zero\"  # Raising a string exception (W0701)\n+\n+\n+            **HINT:** You can use comments to denote sections of code that need to be filled in by the user (which is commented out as a convention)\n+\n+\n+            **IMPORTANT**: Don't modify anything outside of markers specified. Otherwise, you could break up the original code and mess up your output\n+\n+        \"\"\"\n+        response = \"\"\n+        #raise \"This should not be called\"\n+        return response\n+\n+    def get_original_code(self):\n+        \"\"\"\n+            Returns the original code for this fixer.\n+        \"\"\"\n+        return self.__orig_code\n+\n+\n+    def get_report(self):\n+        \"\"\"\n+            Return the pylint report for this fixer.\n+        \"\"\"\n+        return self.__pylint_report\n+\n+\n+\n+    def save_report(self, file_name):\n+        \"\"\"\n+            Save the report to a specified file name. \n+        \"\"\"\n+        with open(file_name,\"w+\") as f:\n+            f.write(self.__pylint_report)\n+\n+\n+    def get_filename(self):\n+        \"\"\"\n+            Return the filename of the original code for this fixer.\n+        \"\"\"\n+        return self.__orig_code_file\n+\n+    def save_original_code(self, file_name):\n+        \"\"\"\n+            Save the original code to a specified file name. \n+        \"\"\"\n+        with open(file_name,\"w+\") as f:\n+            f.write(self.__orig_code)\n+\n+\n+\n+\n+class FixerCreator(object):\n+    \"\"\"\n+        Creates a new fixer for this module using the provided details. \n+\n+        :param module_name: The full name of the module that contains the code to be fixed, including path if applicable. \n+        :param func_name: The full name of the function withing the module that needs to be fixed. \n+        :param report: The pylint report from running the fixer on the original code.\n+        :param orig_code_file: The full file path where the original code resides. \n+        \"\"\"\n+    def __init__(self, module_name=\"\", func_name=\"\", report=\"\", orig_code_file=\"\"):\n+        self.__module_name = module_name\n+        self.__func_name = func_name\n+        self.__report = report\n+        self.__orig_code_file = orig_code_file\n+\n+    def generate(self):\n+        \"\"\"\n+            Generates a new fixer for this module.\n+        \"\"\"\n+        return Fixer(self.__module_name, self.__func_name, self.__report, self.__orig_code_file)\n+\n+\n+class ModuleFixerCreator(object):\n+    \"\"\"\n+        Creates a fixer creator that will create an instance of all the fixers in a given list.\n+\n+        :param module_fixers: A list of strings, each string denoting the full name of the module that contains the code to be fixed, including path if applicable. \n+        \"\"\"\n+    def __init__(self, module_fixers):\n+        self.__module_fixers = module_fixers\n+\n+    def generate(self):\n+        \"\"\"\n+            Generates a new fixer for this module and returns it as an object.\n+\n+            :return: A list of FixerCreator objects to create all the fixers in the given module.\n+        \"\"\"\n+\n+        #raise \"This should not be called\"\n+        return [FixerCreator(module_name=fixer, report=\"\", orig_code_file=\"\") for fixer in self.__module_fixers]\n+\n+\n+\n+if __name__ == \"__main__\":\n+    test = ModuleFixerCreator([\"./src/pylint/test\"])",
        "start_line": 66,
        "end_line": 66
    }
}